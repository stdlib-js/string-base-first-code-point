{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { REGEXP as RE_UTF16_SURROGATE_PAIR } from '@stdlib/regexp-utf16-surrogate-pair';\n\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/; // TODO: replace with stdlib pkg\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/; // TODO: replace with stdlib pkg\n\n\n// MAIN //\n\n/**\n* Returns the first `n` Unicode code points of a string.\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} n - number of Unicode code points to return\n* @returns {string} output string\n*\n* @example\n* var out = first( 'last man standing', 1 );\n* // returns 'l'\n*\n* @example\n* var out = first( 'presidential election', 1 );\n* // returns 'p'\n*\n* @example\n* var out = first( 'JavaScript', 1 );\n* // returns 'J'\n*\n* @example\n* var out = first( 'Hidden Treasures', 1 );\n* // returns 'H'\n*/\nfunction first( str, n ) {\n\tvar len;\n\tvar out;\n\tvar ch1;\n\tvar ch2;\n\tvar cnt;\n\tvar i;\n\tif ( str === '' || n === 0 ) {\n\t\treturn '';\n\t}\n\tif ( n === 1 ) {\n\t\tstr = str.substring( 0, 2 );\n\t\tif ( RE_UTF16_SURROGATE_PAIR.test( str ) ) {\n\t\t\treturn str;\n\t\t}\n\t\treturn str[ 0 ];\n\t}\n\tlen = str.length;\n\tout = '';\n\tcnt = 0;\n\n\t// Process the string one Unicode code unit at a time and count UTF-16 surrogate pairs as a single Unicode code point...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tch1 = str[ i ];\n\t\tout += ch1;\n\t\tcnt += 1;\n\n\t\t// Check for a high UTF-16 surrogate...\n\t\tif ( RE_UTF16_HIGH_SURROGATE.test( ch1 ) ) {\n\t\t\t// Check for an unpaired surrogate at the end of the input string...\n\t\t\tif ( i === len-1 ) {\n\t\t\t\t// We found an unpaired surrogate...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Check whether the high surrogate is paired with a low surrogate...\n\t\t\tch2 = str[ i+1 ];\n\t\t\tif ( RE_UTF16_LOW_SURROGATE.test( ch2 ) ) {\n\t\t\t\t// We found a surrogate pair:\n\t\t\t\tout += ch2;\n\t\t\t\ti += 1; // bump the increment to process the next code unit\n\t\t\t}\n\t\t}\n\t\t// Check whether we've found the desired number of code points...\n\t\tif ( cnt === n ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default first;\n"],"names":["RE_UTF16_LOW_SURROGATE","RE_UTF16_HIGH_SURROGATE","first","str","n","len","out","ch1","ch2","cnt","i","substring","RE_UTF16_SURROGATE_PAIR","test","length"],"mappings":";;yGA2BA,IAAIA,EAAyB,kBACzBC,EAA0B,kBA4B9B,SAASC,EAAOC,EAAKC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAa,KAARP,GAAoB,IAANC,EAClB,MAAO,GAER,GAAW,IAANA,EAEJ,OADAD,EAAMA,EAAIQ,UAAW,EAAG,GACnBC,EAAwBC,KAAMV,GAC3BA,EAEDA,EAAK,GAOb,IALAE,EAAMF,EAAIW,OACVR,EAAM,GACNG,EAAM,EAGAC,EAAI,EAAGA,EAAIL,EAAKK,IAAM,CAM3B,GAJAJ,GADAC,EAAMJ,EAAKO,GAEXD,GAAO,EAGFR,EAAwBY,KAAMN,GAAQ,CAE1C,GAAKG,IAAML,EAAI,EAEd,MAGDG,EAAML,EAAKO,EAAE,GACRV,EAAuBa,KAAML,KAEjCF,GAAOE,EACPE,GAAK,EAEN,CAED,GAAKD,IAAQL,EACZ,KAED,CACD,OAAOE,CACR"}